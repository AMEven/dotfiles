#!/bin/env fish

set PKGSETS_STATE_PATH ~/.local/state/dotfiles/pkgsets
set PKGSETS_PATH       ./nix/pkgsets

set subcmd $argv[1]


function include -a pkgset
  argparse --name="pkgset include" "all" -- $argv
  or return

  # --all is used.
  if set -q _flag_all
    for pkgset in (ls $PKGSETS_PATH)
      include $pkgset
    end

    return
  # no pkgset is provided.
  else if test -z $pkgset
    echo No package set provided.

    return
  else
    set pkgset (basename $pkgset)

    # pkgset not available.
    if ! test -e $PKGSETS_PATH/$pkgset
      echo Package set `$pkgset` is not available.

      return
    end

    read_pkgsets pkgsets

    if ! contains $pkgset $pkgsets
      # sort pkgsets first.
      set pkgsets (string collect -- $pkgsets $pkgset | sort)
      write_pkgsets pkgsets
    end
  end
end


function exclude -a pkgset
  argparse --name="pkgset exclude" "all" -- $argv
  or return

  # --all is used.
  if set -q _flag_all
    rm -f $PKGSETS_STATE_PATH

    return
  else
    set pkgset (basename $pkgset)

    read_pkgsets pkgsets

    set ix (contains -i $pkgset $pkgsets)
    and set -e pkgsets[$ix]

    write_pkgsets pkgsets
  end
end


function read_pkgsets -S -a var
  if test -e $PKGSETS_STATE_PATH
    set $var (cat $PKGSETS_STATE_PATH)
  end
end


function write_pkgsets -S -a var
  mkdir -p (dirname $PKGSETS_STATE_PATH)
  string collect -- $$var > $PKGSETS_STATE_PATH
end


function list
  # test if file exists and is not empty.
  if test -e $PKGSETS_STATE_PATH; and test -s $PKGSETS_STATE_PATH
    echo Included package sets are:
    cat $PKGSETS_STATE_PATH
  else
    echo No package set included.
  end
end


# dispatch subcommand
switch $subcmd
  case include
    include $argv[2]
  case exclude
    exclude $argv[2]
  case list
    list
  case '*'
    echo No such command: $subcmd
    exit 1
end
